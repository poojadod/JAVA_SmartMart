/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.CustomerRole;

import Business.Customer.Customer;
import Business.EcoSystem;
import Business.UserAccount.UserAccount;
import javax.swing.JPanel;
import javax.swing.JSplitPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Pragna 
 */
public class CustomerCart extends javax.swing.JPanel {

    /**
     * Creates new form CustomerCart
     */
    private JPanel userProcessContainer;
    EcoSystem ecosystem;
    DefaultTableModel grocModel;
    private UserAccount userAccount;
    DefaultTableModel foodModel;
    DefaultTableModel legalModel;
    DefaultTableModel eventModel;
    DefaultTableModel therapyModel;
    Customer cust;
    JSplitPane screen;
    Double Total;
    Double Sum;

    public CustomerCart(JPanel userProcessContainer, UserAccount account, EcoSystem system, JSplitPane screen, Customer cust) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.screen = screen;
        this.userAccount = account;
        this.cust = cust;
        ecosystem = system;

        createTableModel();
        populateCustomerOrders();
    }

    public void populateCustomerOrders() {
        //Legal
        for (int i = legalModel.getRowCount() - 1; i >= 0; i--) {
            legalModel.removeRow(i);
        }
        for (int i = 0; i < cust.getLegalorderDirectoryList().size(); i++) {
            legalModel.addRow(new Object[]{
                i + 1,
                cust.getLegalorderDirectoryList().get(i).getStatus(),
                cust.getLegalorderDirectoryList().get(i).getLegal().getName()
            });
        }
        //grocery
        for (int i = grocModel.getRowCount() - 1; i >= 0; i--) {
            grocModel.removeRow(i);
        }
        for (int i = 0; i < cust.getOrderDirectoryList().size(); i++) {
            grocModel.addRow(new Object[]{
                i + 1,
                cust.getOrderDirectoryList().get(i).getStatus(),
                cust.getOrderDirectoryList().get(i).getRestaurant().getName()
            });

        }
        // restuarant
        for (int i = eventModel.getRowCount() - 1; i >= 0; i--) {
            eventModel.removeRow(i);
        }
        for (int i = 0; i < cust.getEventDirectoryList().size(); i++) {
            eventModel.addRow(new Object[]{
                i + 1,
                cust.getEventDirectoryList().get(i).getStatus(),
                cust.getEventDirectoryList().get(i).getHospitalManager().getName()
            });
        }

        for (int i = therapyModel.getRowCount() - 1; i >= 0; i--) {
            therapyModel.removeRow(i);
        }
       
        for (int i = foodModel.getRowCount() - 1; i >= 0; i--) {
            foodModel.removeRow(i);
        }
        for (int i = 0; i < cust.getHotelorderDirectoryList().size(); i++) {
            foodModel.addRow(new Object[]{
                i + 1,
                cust.getHotelorderDirectoryList().get(i).getStatus(),
                cust.getHotelorderDirectoryList().get(i).getRestaurant().getName()
            });

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        restListTable1 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        restListTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Location", "Phone No"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(restListTable1);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Food Order");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 1006, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(172, 172, 172))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(158, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable restListTable1;
    // End of variables declaration//GEN-END:variables

    private void createTableModel() {
        grocModel = new DefaultTableModel();
//        restListTable.setModel(grocModel);
        grocModel.addColumn("Id");
        grocModel.addColumn("Status");
        grocModel.addColumn("Grcoery Store Name");

        foodModel = new DefaultTableModel();
        restListTable1.setModel(foodModel);
        foodModel.addColumn("Id");
        foodModel.addColumn("Status");
        foodModel.addColumn("Restaurant Name");

        legalModel = new DefaultTableModel();
//        legalTable.setModel(legalModel);
        legalModel.addColumn("Id");
        legalModel.addColumn("Status");
        legalModel.addColumn("Legal Company Name");

        eventModel = new DefaultTableModel();
//        restListTable3.setModel(eventModel);
        eventModel.addColumn("Id");
        eventModel.addColumn("Status");
        eventModel.addColumn("HouseHelp Name");

        therapyModel = new DefaultTableModel();
//        restListTable4.setModel(therapyModel);
        therapyModel.addColumn("Id");
        therapyModel.addColumn("Status");
        therapyModel.addColumn("Therapist Name");
    }

    private void populateTable() {
        if (cust.getOrderDirectoryList().size() > 0) {
            for (int i = grocModel.getRowCount() - 1; i >= 0; i--) {
                grocModel.removeRow(i);
            }
            int index = (cust.getOrderDirectoryList().size()) - 1;
            for (int i = 0; i < cust.getOrderDirectoryList().get(index).getOrderList().size(); i++) {
                Total = 0.0;
                Total = Double.parseDouble(cust.getOrderDirectoryList().get(index).getOrderList().get(i).getPrice()) * cust.getOrderDirectoryList().get(index).getOrderList().get(i).getQuantity();
                Sum += Total;
                grocModel.addRow(new Object[]{
                    cust.getOrderDirectoryList().get(index).getId(),
                    cust.getOrderDirectoryList().get(index).getOrderList().get(i).getItem(),
                    cust.getOrderDirectoryList().get(index).getOrderList().get(i).getItem(),
                    cust.getOrderDirectoryList().get(index).getOrderList().get(i).getPrice(),
                    cust.getOrderDirectoryList().get(index).getOrderList().get(i).getQuantity(),
                    Total
                });
            }
        }
        if (cust.getHotelorderDirectoryList().size() > 0) {
            for (int i = grocModel.getRowCount() - 1; i >= 0; i--) {
                grocModel.removeRow(i);
            }
            int index = (cust.getOrderDirectoryList().size()) - 1;
            for (int i = 0; i < cust.getOrderDirectoryList().get(index).getOrderList().size(); i++) {
                Total = 0.0;
                Total = Double.parseDouble(cust.getOrderDirectoryList().get(index).getOrderList().get(i).getPrice()) * cust.getOrderDirectoryList().get(index).getOrderList().get(i).getQuantity();
                Sum += Total;
                grocModel.addRow(new Object[]{
                    cust.getOrderDirectoryList().get(index).getId(),
                    cust.getOrderDirectoryList().get(index).getOrderList().get(i).getItem(),
                    cust.getOrderDirectoryList().get(index).getOrderList().get(i).getItem(),
                    cust.getOrderDirectoryList().get(index).getOrderList().get(i).getPrice(),
                    cust.getOrderDirectoryList().get(index).getOrderList().get(i).getQuantity(),
                    Total
                });
            }
        }
    }
}
